package es.fdi.iw.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import es.fdi.iw.ContextInitializer;
import es.fdi.iw.model.Comentario;
import es.fdi.iw.model.Local;
import es.fdi.iw.model.Oferta;
import es.fdi.iw.model.Reserva;
import es.fdi.iw.model.Tags;
import es.fdi.iw.model.Usuario;

/**
 * Una aplicación de ejemplo para IW.
 */
@SuppressWarnings("unused")
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@PersistenceContext
	private EntityManager entityManager;

	
	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@ResponseBody
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public ResponseEntity<String> login(
			@RequestParam("login") String formLogin,
			@RequestParam("pass") String formPass,
			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {
		
		logger.info("Login attempt from '{}' while visiting '{}'", formLogin, formPass);
		
		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) { 
			model.addAttribute("loginError", "usuarios y contrase�as: 4 caracteres m�nimo");
			return new ResponseEntity<String>("Inicio de sesi�n incorrecto", HttpStatus.BAD_REQUEST);
		} else {
			Usuario u = null;
			try{				
				u = (Usuario) entityManager.createNamedQuery("dameUsuarioLogin").setParameter("nombre", formLogin).getSingleResult();
				
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");				
					session.setAttribute("user", u);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contrase�a");
					return new ResponseEntity<String>("Inicio de sesi�n incorrecto", HttpStatus.BAD_REQUEST);
				}
			} catch (NoResultException nre) {
				return new ResponseEntity<String>("Inicio de sesi�n incorrecto", HttpStatus.BAD_REQUEST);
			}
		}

		// redirects to view from which login was requested
		return new ResponseEntity<String>("Inicio de sesi�n correcto", HttpStatus.OK);
	}
		
	
	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "redirect:home";
	}

	/**
	 * Uploads a photo for a user
	 * @param id of user 
	 * @param photo to upload
	 * @return
	 */
	@RequestMapping(value="/user", method=RequestMethod.POST)
    public @ResponseBody String handleFileUpload(@RequestParam("photo") MultipartFile photo,
    		@RequestParam("id") String id){
        if (!photo.isEmpty()) {
            try {
                byte[] bytes = photo.getBytes();
                BufferedOutputStream stream =
                        new BufferedOutputStream(
                        		new FileOutputStream(ContextInitializer.getFile("user", id)));
                stream.write(bytes);
                stream.close();
                return "You successfully uploaded " + id + 
                		" into " + ContextInitializer.getFile("user", id).getAbsolutePath() + "!";
            } catch (Exception e) {
                return "You failed to upload " + id + " => " + e.getMessage();
            }
        } else {
            return "You failed to upload a photo for " + id + " because the file was empty.";
        }
    }

	/**
	 * Displays user details
	 */
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String user(HttpSession session, HttpServletRequest request) {		
		return "user";
	}	

	/**
	 * Returns a users' photo
	 * @param id id of user to get photo from
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/usuariosFoto", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] usuariosfoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("usuarios", id);
	    InputStream in = null;
	    if (f.exists()) {
	    	in = new BufferedInputStream(new FileInputStream(f));
	    } else {
	    	in = new BufferedInputStream(
	    			this.getClass().getClassLoader().getResourceAsStream("unknown_user.jpg"));
	    }
	    return IOUtils.toByteArray(in);		
	}
	
	@ResponseBody
	@RequestMapping(value="/ofertasFoto", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] offerPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("ofertas", id);
	    InputStream in = null; 
	    if (f.exists()) {
	    	in = new BufferedInputStream(new FileInputStream(f));
	    } else {
	    	in = new BufferedInputStream(
	    			this.getClass().getClassLoader().getResourceAsStream("unknown_offer.jpg"));
	    }
	    return IOUtils.toByteArray(in);		
	}
	@ResponseBody
	@RequestMapping(value="/localesFoto", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] localFoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("locales", id);
	    InputStream in = null; 
	    if (f.exists()) {
	    	in = new BufferedInputStream(new FileInputStream(f));
	    } else {
	    	in = new BufferedInputStream(
	    			this.getClass().getClassLoader().getResourceAsStream("unknown_local.jpg"));
	    }
	    return IOUtils.toByteArray(in);		
	}
	
	/**
	 * Toggles debug mode
	 */
	@RequestMapping(value = "/debug", method = RequestMethod.GET)
	public String debug(HttpSession session, HttpServletRequest request) {
		String formDebug = request.getParameter("debug");
		logger.info("Setting debug to {}", formDebug);
		session.setAttribute("debug", 
				"true".equals(formDebug) ? "true" : "false");
		return "redirect:/";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String empty(Locale locale, Model model,HttpSession session) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate);
		model.addAttribute("pageTitle", "MealNDrink");
		model.addAttribute("active", "home");
		logger.info("Setting active tab: home");
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		
		//Esto es para los locales mas populares
		//La idea es que vea que locales son los que mas reservas tienen
		//y le pase a la vista los cinco primeros

		List<Oferta> auxOffers = new ArrayList<Oferta>();
		auxOffers = entityManager.createNamedQuery("allOffers").getResultList();	
		
		//Para saber los locales mas populares se cogen los cinco que tengan mas comentarios
		List<Local> auxLocals = new ArrayList<Local>();
		auxLocals = entityManager.createNamedQuery("allLocals").getResultList();
						
		List<String> tagsToShow = new ArrayList<String>();
		for(int i =0; i < auxOffers.size(); i++){
			tagsToShow.add(auxOffers.get(i).tagsToShow());
		}
		
		model.addAttribute("alltags", entityManager.createNamedQuery("allTags").getResultList());
		model.addAttribute("tagsString", tagsToShow);	
		model.addAttribute("platos", auxOffers);	
		model.addAttribute("locales", auxLocals);
		
		return "home";
	}	

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(Locale locale, Model model, HttpSession session) {
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		return empty(locale, model, session);
	}	
	

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/acercaDe", method = RequestMethod.GET)
	public String acercaDe(Locale locale, Model model,HttpSession session) {
		model.addAttribute("active", "acercaDe");
		model.addAttribute("pageTitle", "Acerca de");		
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		return "acercaDe";
	}	
	@RequestMapping(value = "/usuario", method = RequestMethod.GET)
	public String usuario(@RequestParam("id") long id, Model model, HttpSession session) {
		model.addAttribute("active", "usuario");		

		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
		model.addAttribute("usuario", usuario);
		model.addAttribute("pageTitle", "Perfil de " + usuario.getNombre());
		return "usuario";		
	}	

	@RequestMapping(value = "/registrarse", method = RequestMethod.GET)
	public String registrarse(Locale locale, Model model) {
		model.addAttribute("active", "registrarse");

		return "registrarse";
	}	
	
	@Transactional
	@RequestMapping(value = "/nuevoComentario", method = RequestMethod.POST)	
	public String nuevoComentario(@RequestParam("idLocal") long idLocal, 
								  @RequestParam("comment") String comment, 
								  HttpSession session, Model model) {		
			/* Al anadir un comentario hay que hacer:
			 * 	- Anadir el comentario al usuario
			 *  - Anadir el comentario al local
			 */
		
			Usuario usuarioSesion = (Usuario)session.getAttribute("user");
			Usuario usuario = entityManager.find(Usuario.class, usuarioSesion.getID());			
			Local local = entityManager.find(Local.class, idLocal);
			Comentario comentario = new Comentario();
			Date date = new java.util.Date();
			Timestamp fecha = new Timestamp(date.getTime());
				
			comentario.setLocal(local);
			comentario.setUsuario(usuario);
			comentario.setTexto(comment);
			comentario.setFecha(fecha);
	
			usuario.getComentarios().add(comentario);
			local.getComentarios().add(comentario);
			
			entityManager.persist(usuario);
			entityManager.persist(local);
		
		return "redirect:comercio_externo?id="+local.getID();
	}	
	
	@Transactional
	@RequestMapping(value = "/reserva", method = RequestMethod.GET)	
	public String reserva(@RequestParam("id") long id, @RequestParam("dondeEstoy") String pag,Model model, HttpSession session) {		
		model.addAttribute("active", "comercio_externo");		
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");		
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		try {
			Oferta aux = entityManager.find(Oferta.class, id);
			
			//fecha actual
			DateFormat dateFormatActualDay = new SimpleDateFormat("dd/MM/yyyy");			
			Date dateActual = new Date();
						
			// fecha limite
			DateFormat dateFormatLimitDay = new SimpleDateFormat("dd/MM/yyyy");
			Date dateLimit = new Date(aux.getFechaLimite().getTime());
					
			model.addAttribute("fechaActual", dateFormatActualDay.format(dateActual));
			model.addAttribute("fechaLimite", dateFormatLimitDay.format(dateLimit));			
			model.addAttribute("infoOferta", aux);
			model.addAttribute("paginaVuelta", pag);
			model.addAttribute("pageTitle", "Reserva");
		} catch (NoResultException nre) {
			logger.error("No existe esa oferta: {}", id, nre);
		}
		
		return "reserva";
	}	
	/**
	 * 	Nueva Reserva, cosas al hacer una reserva:
	 * 		- Generar codigo qr
	 * 		- Crearse un objeto reserva (el cual guarda el codigo qr) que se anade en Usuario y en Oferta
	 * 		- Modificar la capacidad de la Oferta 
	 */
	@Transactional
	@RequestMapping(value = "/nuevaReserva", method = RequestMethod.POST)	
	public String nuevaReserva(
			@RequestParam("capacidad") int cap, 
			@RequestParam("fecha") String fecha, 
			@RequestParam("hora") String hora, 
			@RequestParam("oferta") long ofertaID,
			@RequestParam("dondeEstoy") String pag,
			HttpSession session, Locale locale, Model model) {
	
		String fechaTimeStamp = "";	
		int pos = 2;
		List<String> aux = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(fecha,"/");
		while(tokens.hasMoreTokens()){			
			aux.add(tokens.nextToken());					 
		}
		while(pos != -1){			
			fechaTimeStamp += aux.get(pos);
			if(pos != 0) fechaTimeStamp += "-";
			pos--;
		}
		
		Timestamp timestamp = Timestamp.valueOf(fechaTimeStamp + " " + hora + ":00.0");
			
		Usuario usuarioSesion = (Usuario)session.getAttribute("user");
		Usuario user= entityManager.find(Usuario.class, usuarioSesion.getID());
			
		//Nos traemos la oferta
		Oferta oferta= entityManager.find(Oferta.class, ofertaID);
					
		//fecha y hora nos serviran para generar el codigo qr >> para el user y para el local
		String qrInfo = "Este codigo QR es valido para que " + cap + " personas disfruten de la oferta " 
				+ oferta.getNombre() + " en el local " + oferta.getLocal().getNombre() + " a las " + hora
				+ " el "+ fecha + ". Esta reserva ha sido realizada por " + user.getNombre();
		
		
		//Crear un objeto reserva
		Reserva reserva = new Reserva();
		reserva.setCodigoQr(qrInfo);			
		reserva.setUsuario(user);
		reserva.setOferta(oferta);
		reserva.setNumPersonas(cap);
		reserva.setfechaReserva(timestamp);	
		reserva.setValidado(false);
		
		//Anyadir la reserva a User y Oferta
		user.getReservas().add(reserva);
		oferta.getReservas().add(reserva);		
		
		//Cambiamos la capacidad de la oferta
		int nuevacap = oferta.getCapacidadActual() + cap;
		oferta.setCapacidadActual(nuevacap);
		
		entityManager.persist(reserva);
		entityManager.persist(user);
		entityManager.persist(oferta);
		
		if(pag.equals("comercio_externo")){		
			return "redirect:comercio_externo?id=" + oferta.getLocal().getID();
		}
		else		
			return "redirect:" + pag;
	}	
	
	@Transactional
	@RequestMapping(value = "/eliminarReserva", method = RequestMethod.POST)
	public String eliminarReserva(@RequestParam("idUsuario") long idUsuario,
								  @RequestParam("idReserva") long idReserva,
								  Model model, HttpSession session){
		
			Usuario usuarioSesion = (Usuario)session.getAttribute("user");
			if(usuarioSesion.getID() == idUsuario || usuarioSesion.getRol().equals("admin")){
				Reserva reserva= entityManager.find(Reserva.class, idReserva);
				Oferta oferta = entityManager.find(Oferta.class, reserva.getOferta().getID());			
				oferta.setCapacidadActual(oferta.getCapacidadActual() - reserva.getNumPersonas());
				entityManager.persist(oferta);
				entityManager.remove(reserva);	
			}
			else
				System.out.println("No se borro la reserva porque no es el dueño de esa oferta o el administrador");
			
			return "eliminarReserva";
    }
	
	@Transactional
	@RequestMapping(value = "/comercio_externo", method = RequestMethod.GET)	
	public String comercio_externo(@RequestParam("id") long id, HttpSession session, Model model) {		
		model.addAttribute("active", "comercio_externo");			
		try {
			Local aux = entityManager.find(Local.class, id);
			Usuario usuarioSesion = (Usuario)session.getAttribute("user");
			model.addAttribute("infoLocal", aux);			
			model.addAttribute("pageTitle", aux.getNombre());
			Usuario usuarioOnline = (Usuario)session.getAttribute("user");
			if(usuarioOnline != null){
				Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
				model.addAttribute("usuario", usuario);	
			}
		} catch (NoResultException nre) {
			logger.error("No existe ese local: {}", id, nre);
		}
		
		return "comercio_externo";
	}	

	@RequestMapping(value = "/detallesOferta", method = RequestMethod.GET)
	@ResponseBody
	public String detallesOferta(@RequestParam("id") long id) {
		Oferta o = (Oferta)entityManager.find(Oferta.class, id);

		String ret = "{nombre: " + "\""+o.getNombre()+ "\"" + ", id: " + o.getID() + "}";
		System.err.println(ret);
		return ret;		
	}

	@Transactional
	@RequestMapping(value = "/comercio_interno", method = RequestMethod.GET)
	public String comercio_interno(@RequestParam("id") long id,Model model,HttpSession session) {
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		Local local = entityManager.find(Local.class, id);
		model.addAttribute("pageTitle", local.getNombre());
		model.addAttribute("active", "comercio_interno");
		model.addAttribute("local", local);	
		model.addAttribute("alltags", entityManager.createNamedQuery("allTags").getResultList());	
		return "comercio_interno";
	}	
	@Transactional
	@RequestMapping(value = "/nuevaOferta", method = RequestMethod.POST)
	public String nuevaOferta(
			@RequestParam("fileToUpload") MultipartFile photo,
    		@RequestParam("id_local") long id,     		
    		@RequestParam("name") String nombreOferta,
    		@RequestParam("tagsIds") String tags, 
    		@RequestParam("fecha") String fecha,
    		@RequestParam("cap") int capacidad,
    		@RequestParam("description") String descripcion, 
    		Model model){
		//REVISAR LO DE LA FECHA....O PONEMOS HORAS O PONEMOS FECHA O PONEMOS LAS DOS
	
		boolean seguro = palabraSeguro(nombreOferta) /*&& palabraSeguro(tags)*/&& fechaSeguro(fecha) && descripcionSeguro(descripcion);
		if (seguro) {
		
		String fechatTimesStamp="";
		int pos=2;
		List<String> aux = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(fecha,"/");
		while(tokens.hasMoreTokens()){			
			aux.add(tokens.nextToken());
		}
		while(pos != -1){
			fechatTimesStamp +=aux.get(pos);
			if(pos != 0) fechatTimesStamp+= "-";
			pos--;
		}
		//System.out.println(fechatTimesStamp);
		Timestamp timestamp = Timestamp.valueOf(fechatTimesStamp+ " 00:00:00.0");
		
		//System.out.println(tags);
		List<Tags> auxTags = new ArrayList<Tags>();
		StringTokenizer ids = new StringTokenizer(tags,",");
		while(ids.hasMoreTokens()){	
			auxTags.add(entityManager.find(Tags.class, Long.parseLong(ids.nextToken())));					 
		}
				
		Local local = entityManager.find(Local.class, id);
		Oferta offer= new Oferta();
		offer.setNombre(nombreOferta);
		offer.setFechaLimite(timestamp);
		offer.setCapacidadTotal(capacidad);
		offer.setDescripcion(descripcion);
		offer.setTags(auxTags); 
		offer.setLocal(local);
		local.getOfertas().add(offer);
		entityManager.persist(offer);
		entityManager.flush();
        if (!photo.isEmpty()) {
            try {            	
                byte[] bytes = photo.getBytes();
                BufferedOutputStream stream = new BufferedOutputStream(
                		new FileOutputStream(ContextInitializer.getFile(
                				"ofertas", ""+offer.getID()+".jpg")));
                stream.write(bytes);
                stream.close();

				entityManager.persist(offer);
				entityManager.persist(local);		
            } catch (Exception e) {
            	return "redirect:comercio_interno?id="+local.getID();
            }
        } else { //no ha seleccionado foto, poner la por defecto          
    	    	BufferedInputStream in = new BufferedInputStream(
    	    			this.getClass().getClassLoader().getResourceAsStream("unknown_offer.jpg"));
    	    	BufferedOutputStream stream = null;
				try {
					stream = new BufferedOutputStream(
							new FileOutputStream(ContextInitializer.getFile("ofertas", offer.getNombre()+".jpg")));
				} catch (FileNotFoundException e1) {
					e1.printStackTrace();
				}
				try {
					stream.write(IOUtils.toByteArray(in));
				} catch (IOException e) {
					e.printStackTrace();
				}
				entityManager.persist(offer);
				entityManager.persist(local);				
        }
        return "redirect:comercio_interno?id="+local.getID();
}
else 
	return "redirect:paginaError"; 

}
	@Transactional
	@RequestMapping(value = "/editarOferta", method = RequestMethod.POST)
	public String editarOferta(
			@RequestParam("EditfileToUpload") MultipartFile photo,
    		@RequestParam("id_local") long id,     		
    		@RequestParam("editName") String nombreOferta, 
    		@RequestParam("editTags") String tags,
    		@RequestParam("editFecha") String fecha,
    		@RequestParam("editCap") int capacidad,
    		@RequestParam("editDescription") String descripcion,
    		@RequestParam("id_Editoffer") String idOffer, 
    		Model model){
		
		List<Tags> auxTags = new ArrayList<Tags>();
		StringTokenizer ids = new StringTokenizer(tags,",");
		while(ids.hasMoreTokens()){	
			auxTags.add(entityManager.find(Tags.class, Long.parseLong(ids.nextToken())));					 
		}
		
		String fechatTimesStamp="";
		int pos=2;
		List<String> aux = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(fecha,"/");
		while(tokens.hasMoreTokens()){			
			aux.add(tokens.nextToken());
		}
		
		
		
		boolean seguro = palabraSeguro(nombreOferta) && fechaSeguro(fecha) && descripcionSeguro(descripcion) && palabraSeguro(idOffer);
		if (seguro) {		
			if(Integer.parseInt(aux.get(0)) < 2000){
				while(pos != -1){
					fechatTimesStamp +=aux.get(pos);
					if(pos != 0) fechatTimesStamp+= "-";
					pos--;
				}					
			}
			else{
			pos = 0;
				while(pos != 3){
					fechatTimesStamp +=aux.get(pos);
					if(pos != 2) fechatTimesStamp+= "-";
					pos++;
				}	
			}
			Timestamp timestamp = Timestamp.valueOf(fechatTimesStamp+ " 00:00:00.0");
			Local local = entityManager.find(Local.class, id);
			System.err.println("+"+idOffer);
			Oferta offer= entityManager.find(Oferta.class, Long.valueOf(idOffer));
			offer.setNombre(nombreOferta);
			//offer.setFechaLimite(timestamp);
			offer.setCapacidadTotal(capacidad);
			offer.setDescripcion(descripcion);	
			offer.setLocal(local);
			local.getOfertas().add(offer);
			entityManager.persist(offer);
			entityManager.flush();
	        if (!photo.isEmpty()) {
	            try {
	                byte[] bytes = photo.getBytes();
	                BufferedOutputStream stream = new BufferedOutputStream(
	                		new FileOutputStream(ContextInitializer.getFile(
	                				"ofertas", ""+offer.getID()+".jpg")));
	                stream.write(bytes);
	                stream.close();
	
					entityManager.persist(offer);
					entityManager.persist(local);		
	            } catch (Exception e) {
	            	return "redirect:comercio_interno?id="+local.getID();
	            }
	        }
	        return "redirect:comercio_interno?id="+local.getID();
	}
	else
		return "redirect:paginaError";	
}
	
	@Transactional
	@RequestMapping(value = "/eliminarOferta", method = RequestMethod.POST)
	public String eliminarOferta(@RequestParam("idOferta") long idOffer,Model model){
			Oferta oferta= entityManager.find(Oferta.class, idOffer);
			entityManager.remove(oferta);			
			return "eliminarOferta";
    }

	@Transactional
	@RequestMapping(value = "/nuevoLocal", method = RequestMethod.POST)
	public String nuevoLocal(@RequestParam("fileToUpload") MultipartFile photo,
    		@RequestParam("id_usuario") long id, @RequestParam("name") String nombreLocal,@RequestParam("timeBusiness") String horario
    		, @RequestParam("dir") String direccion,@RequestParam("email") String email,@RequestParam("tel") String telefono,
    		@RequestParam("redireccion")String pagina, Model model){
		//REVISAR LO DE LA FECHA....O PONEMOS HORAS O PONEMOS FECHA O PONEMOS LAS DOS
	
		boolean seguro = palabraSeguro(nombreLocal) && horarioSeguro(horario) && direccionSeguro(direccion) && emailSeguro(email) && telefonoSeguro(telefono);
		if (seguro) {
			
			//UBICACI�N!!!!!!!!!!!!!		
			Usuario usuario = entityManager.find(Usuario.class, id);
			Local local= new Local();
			local.setNombre(nombreLocal);
			local.setDireccion(direccion);
			local.setHorario(horario);
			local.setUsuario(usuario);
			local.setEmail(email);
			local.setTelefono(telefono);
			entityManager.persist(local);
			entityManager.flush();
	        if (!photo.isEmpty()) {
	            try {
	                byte[] bytes = photo.getBytes();
	                BufferedOutputStream stream =
	                        new BufferedOutputStream(
	                        		new FileOutputStream(
	                        				ContextInitializer.getFile("locales", ""+local.getID()+".jpg")));
	                stream.write(bytes);
	                stream.close();
	                usuario.getLocales().add(local);
	        		entityManager.persist(usuario);
	        		entityManager.persist(local);       		
	         
	            } catch (Exception e) {
	            	return "redirect:comercio_interno?id="+local.getID();
	            }
	        } else { //no ha seleccionado foto, poner la por defecto
	          
	    	    	BufferedInputStream in = new BufferedInputStream(
	    	    			this.getClass().getClassLoader().getResourceAsStream("unknown_local.jpg"));
	    	    	BufferedOutputStream stream = null;
					try {
						stream = new BufferedOutputStream(
								new FileOutputStream(ContextInitializer.getFile("locales", ""+local.getID()+".jpg")));
					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					try {
						stream.write(IOUtils.toByteArray(in));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	                usuario.getLocales().add(local);
	        		entityManager.persist(usuario);
	        		entityManager.persist(local);  
					
	        }
			
			if(pagina.equalsIgnoreCase("usuario"))
				return "redirect:usuario?id="+id;
			else
				return "redirect:administracion";	
		}
		else
			return "redirect:paginaError"; 
    }
	
	@Transactional
	@RequestMapping(value = "/eliminarLocal", method = RequestMethod.POST)
	public String eliminarLocal(@RequestParam("idLocal") long idLocal,Model model){
			Local local= entityManager.find(Local.class, idLocal);
			entityManager.remove(local);	
			return "eliminarLocal";
    }
	
	@Transactional
	@RequestMapping(value = "/editarLocal", method = RequestMethod.POST)
	public String editarLocal(@RequestParam("fileToUpload") MultipartFile photo,
    		@RequestParam("id_editLocal") long id,
    		@RequestParam("editNameLocal") String nombreLocal,
    		@RequestParam("editHorarioLocal") String horario,
    		@RequestParam("editDirLocal") String direccion,
    		@RequestParam("editEmailLocal") String email,
    		@RequestParam("editTelLocal") String telefono,
    		@RequestParam("redireccion")String pagina, 
    		 Model model, HttpSession session){
		//Hay que revisar que el local pertenece a un usuario
		
		Usuario uSession = (Usuario)session.getAttribute("user");
		Usuario usuario=entityManager.find(Usuario.class, uSession.getID());
		
		if(usuario != null){ //si está en bbdd
			boolean seguro = palabraSeguro(nombreLocal) && horarioSeguro(horario) && direccionSeguro(direccion) && emailSeguro(email) && telefonoSeguro(telefono);
			if (seguro) {
					Local edit= entityManager.find(Local.class, id);
					edit.setNombre(nombreLocal);
					edit.setHorario(horario);
					edit.setDireccion(direccion);
					edit.setEmail(email);
					edit.setTelefono(telefono);
					entityManager.persist(edit);
					entityManager.flush();
					if(!photo.isEmpty()){						
			            try {
			                byte[] bytes = photo.getBytes();
			                BufferedOutputStream stream =
			                        new BufferedOutputStream(
			                        		new FileOutputStream(ContextInitializer.getFile("locales", ""+edit.getID()+".jpg")));
			                stream.write(bytes);
			                stream.close();        		     		
			         
			            } catch (Exception e) {
			            	e.getMessage();
			            }
					}					
					if(pagina.equalsIgnoreCase("comercio_interno"))
						return "redirect:comercio_interno?id="+id;
					else
						return "redirect:administracion";
			}
		}
		return "redirect:paginaError";	
	}
	@Transactional
	@RequestMapping(value = "/nuevoUsuario", method = RequestMethod.POST)
	public String nuevoUsuario(@RequestParam("fileToUpload") MultipartFile photo,
    		@RequestParam("name") String nombreUsuario,
    		@RequestParam("pwd") String pass,
    		@RequestParam("email") String email,
    		@RequestParam("tel") String telefono,
    		@RequestParam("rol") String rol,    		 
    		Model model){
		//REVISAR LO DE LA FECHA....O PONEMOS HORAS O PONEMOS FECHA O PONEMOS LAS DOS
	
		//UBICACI�N!!!!!!!!!!!!!		
		
		boolean seguro = palabraSeguro(nombreUsuario) && palabraSeguro(pass) && emailSeguro(email) && telefonoSeguro(telefono) && palabraSeguro(rol);
		
		if (seguro) {
			Usuario usuario = creaUsuario(nombreUsuario, email, telefono, rol, pass);
			entityManager.persist(usuario);
			entityManager.flush();
	        if (!photo.isEmpty()) {
	            try {
	                byte[] bytes = photo.getBytes();
	                BufferedOutputStream stream =
	                        new BufferedOutputStream(
	                        		new FileOutputStream(
	                        				ContextInitializer.getFile("usuarios", ""+usuario.getID()+".jpg")));
	                stream.write(bytes);
	                stream.close();
	            } catch (Exception e) {
	            	return "redirect:administracion";
	            }
	        } else { //no ha seleccionado foto, poner la por defecto
	          
	    	    	BufferedInputStream in = new BufferedInputStream(
	    	    			this.getClass().getClassLoader().getResourceAsStream("unknown_local.jpg"));
	    	    	BufferedOutputStream stream = null;
					try {
						stream = new BufferedOutputStream(
								new FileOutputStream(
										ContextInitializer.getFile("usuarios", ""+usuario.getID()+".jpg")));
					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					try {
						stream.write(IOUtils.toByteArray(in));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		    }
				return "redirect:administracion";	
		}
		else
			return "redirect:paginaError";
    }
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/editarUsuario", method = RequestMethod.POST)
	public ResponseEntity<String> editarUsuario(@RequestParam("editId_usuario") long id, @RequestParam("editNameUser") String nombreUsuario,@RequestParam("editPwd") String pass
    		, @RequestParam("editEmail") String email,@RequestParam("editTel") String telefono,@RequestParam("editRedireccion")String pagina, 
    		 Model model, HttpSession session){


		int cambio = -1;
		String res;
		
		Usuario edit= entityManager.find(Usuario.class, id);
		Usuario u = (Usuario)session.getAttribute("user");

		
		if(id == u.getID() || u.getRol().equals("admin")){
			cambio = comprobarCampos(edit, nombreUsuario, pass, email, telefono);
			
			if((andLogica(9, cambio, 1000000001) == true) && (andLogica(4, cambio, 1000100001) == false)) //1ercampo si se ha cambiado el valor- 2do and es si el valor es erroneo 
				edit.setNombre(nombreUsuario);
			if((andLogica(8, cambio, 1000000010) == true) && (andLogica(3, cambio, 1001000010) == false))
				edit.setHashedAndSalted(edit.generateHashedAndSalted(pass));
			if((andLogica(7, cambio, 1000000100) == true) && (andLogica(2, cambio, 1010000100) == false))
				edit.setEmail(email);
			if((andLogica(6, cambio, 1000001000) == true) && (andLogica(1, cambio, 1100001000) == false))
				edit.setTelefono(telefono);
			/*if(andLogica(5, cambio, 1000010000))
				edit.setFoto(photo.getOriginalFilename());*/
		}
		
		res = Integer.toString(cambio);
		
		return new ResponseEntity<String>(res, HttpStatus.OK);
		
			
	}
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/editarUsuarioFoto", method = RequestMethod.POST)
	public ResponseEntity<String> editarUsuario(@RequestParam("editFileToUpload") MultipartFile photo, @RequestParam("editId_usuario") long id, Model model, HttpSession session){

		Usuario edit= entityManager.find(Usuario.class, id);
		Usuario u = (Usuario)session.getAttribute("user");
		
		
		if(!photo.isEmpty() && id == u.getID()){
			if (!photo.isEmpty()) {
			    try {
			        byte[] bytes = photo.getBytes();
			        BufferedOutputStream stream =
			                new BufferedOutputStream(
			                		new FileOutputStream(ContextInitializer.getFile("usuarios", Long.toString(u.getID()) + ".jpg")));
			        stream.write(bytes);
			        stream.close();
					
			    } catch (Exception e) {
			    	return new ResponseEntity<String>("Fotografía no adjuntada al usuario satisfactoriamente", HttpStatus.NOT_MODIFIED);	
			    }
			 }
		}
		
		return new ResponseEntity<String>("Fotografía adjuntada al usuario satisfactoriamente", HttpStatus.OK);
		
			
	}
	
	private boolean andLogica(int pos, int num1, int num2){
		boolean res = true;
		String op;
		int suma;
		char valor;
		
		if(pos < 1 || pos > 9){
			res = false;
		}
		else{
			suma = num1 + num2;
			op = Integer.toString(suma);
			
			valor = op.charAt(pos);
			
			if(valor == '0'){  // 0 and 0 -> 0
				res = false;
			}
			else if(valor == '1'){  // 0 and 1 -> 0
				res = false;
			}
			else if(valor == '2'){  // 1 and 1 -> 1
				res = true;
			}
			
		}
		
		return res;
	}
	
	/*boolean textoSeguro(String texto) {
		
		boolean seguro;
		seguro = !texto.contains("<") && !texto.contains(">") && !texto.contains("$");
		return seguro;
		
	}*/
	
	boolean palabraSeguro(String palabra) {
		return palabra.matches("^[a-zA-Z0-9_]*$");
	}
	
	boolean descripcionSeguro (String descripcion) {
		return descripcion.matches("^[a-zA-Z0-9-_,._ ]*$");
	}
	
	boolean direccionSeguro (String direccion) {
		return direccion.matches("^[a-zA-Z0-9-_,._ ]*$");
	}
	
	boolean horarioSeguro (String direccion) {
		return direccion.matches("^[0-9-]*$");
	}
	
	boolean telefonoSeguro (String telefono) {
		return telefono.matches("^[0-9]{9}$");
	}
	
	boolean fechaSeguro (String fecha) {
		return fecha.matches("^[0-9 -:]*$");
	}
	
	boolean emailSeguro(String email) {
		return email.matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
	}
	
	int comprobarCampos(Usuario sesion, String nombre, String contra, String email, String telef){
		int camposModificados = 1000000000; //1-ErrorNombre-ErrorContra-ErrorEmail-ErrorTelef---ModificadoNombre-ModificadoContra-ModificadoEmail-ModificadoTelef-ModificadoFoto
		             //ejemplo  1100110110    1-    1      -      0    -    0     -   1      ---   1            -     0          -    1          -      1        -     0   
		if(!nombre.equals(sesion.getNombre())){
			String res = new String("ocupado");
			
			try{				
				String apodoBd = (String) entityManager.createNamedQuery("dameApodoUsuario").setParameter("apodo", nombre).getSingleResult();
				camposModificados += 100000;
			} catch (NoResultException nre) {
				if(nombre.length() < 4 || nombre.length() > 12  || !palabraSeguro(nombre)){
					camposModificados += 100000;
				}
				else{
					camposModificados += 1; 
				}	
			}
		}
		
		if(contra != ""){
			if(contra.length() < 6 || contra.length() > 12 || !palabraSeguro(contra)){
				camposModificados += 1000000;
			}
			else{
				camposModificados += 10;
			}
		}
		
		if(!email.equalsIgnoreCase(sesion.getEmail())){
			String patron = new String("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
		            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
			if (!email.matches(patron) || !emailSeguro(email)) {
				camposModificados += 10000000;
			}
			else{
				camposModificados += 100;
			}
		}
		
		if(!telef.equals(sesion.getTelefono())){
			if( !telefonoSeguro(telef)){
				camposModificados += 100000000;
			}
			else{
				camposModificados += 1000;
			}
		}
		
		/*if(!photo.isEmpty()){
			camposModificados += 10000;
		}*/
		
		return camposModificados;
	}
	
	@Transactional
	@RequestMapping(value = "/eliminarUsuario", method = RequestMethod.POST)
	public String eliminarUsuario(@RequestParam("idUsuario") long idUsuario, Model model, HttpSession session){
			
		
			Usuario usuario= entityManager.find(Usuario.class, idUsuario);
			Usuario u = (Usuario)session.getAttribute("user");
			
			if(/*idUsuario == u.getID()*/u.getRol().equals("admin")){
				entityManager.remove(usuario);
			
				File foto = ContextInitializer.getFile("usuarios", Long.toString(idUsuario));
				foto.delete();
				
			}
			
			return "eliminarUsuario";
    }

	@Transactional
	@RequestMapping(value = "/eliminarComentario", method = RequestMethod.POST)
	public String eliminarComentario(@RequestParam("idComentario") long idComentario,Model model){
			Comentario comentario= entityManager.find(Comentario.class, idComentario);
			entityManager.remove(comentario);			
			return "eliminarComentario";
    }
	
	@Transactional
	@RequestMapping(value = "/addNuevoTag", method = RequestMethod.POST)
	public String addNuevoTag(@RequestParam("idLocal") long idLocal,@RequestParam("nombreTag") String addName, Model model){
			Local local= entityManager.find(Local.class, idLocal);
			//FALTA ENVIAR ERRORES
			//String nuevo= local.getTags();
			//nuevo+=","+addName;			
			//local.setTags(nuevo); //esto ahora es diferente
			entityManager.persist(local);	
			return "AddNuevoTag";
    }
	
	@Transactional
	@RequestMapping(value = "/editarTag", method = RequestMethod.POST)
	public String editarTag(@RequestParam("id_tag") long id,
			@RequestParam("nameEditTag") String nombreTagEdit,
			Model model){	
			System.out.println("id: " + id + "  nuevoName: " + nombreTagEdit);
			Tags edit= entityManager.find(Tags.class, id);
			edit.setTexto(nombreTagEdit);			
			entityManager.persist(edit);
			entityManager.flush();			
			return "redirect:administracion";
    }
	
	@Transactional
	@RequestMapping(value = "/eliminarTag", method = RequestMethod.POST)
	public String eliminarTag(@RequestParam("idLocal") long idLocal,@RequestParam("nombreTag") String delName, Model model){
			Local local= entityManager.find(Local.class, idLocal);
			//local.getTags().replaceAll(delName, "");
			//principio de una coma(mirar bbdd)
			//String ret = local.getTags().replaceAll(delName+",", "");
			//siguiente de una coma(mirar bbdd)
			//ret = ret.replaceAll(","+delName, "");
			//cuando solamente tienes un elem, ponemos una coma porque en comercio interno invocamos a dameTagsSeparador(split)
			//ret = ret.replaceAll(delName, ","); 
			//local.setTags(ret); // esto ahora es diferente
			entityManager.persist(local);	
			return "eliminarTag";
    }
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/administracion", method = RequestMethod.GET)
	@Transactional
	public String administracion(Locale locale, Model model,HttpSession session) {
		model.addAttribute("active", "administracion");
		model.addAttribute("pageTitle", "Administracion");
		
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			if(usuario.getRol().equals("admin")){	
				model.addAttribute("admin", entityManager.createNamedQuery("roleUser").setParameter("role", "admin").getSingleResult());
				model.addAttribute("usuarios", entityManager.createNamedQuery("allUsersExceptAdmin").getResultList());
				model.addAttribute("locales", entityManager.createNamedQuery("allLocals").getResultList());
				model.addAttribute("alltags", entityManager.createNamedQuery("allTags").getResultList());					
				return "administracion";
			}	
		}
		model.addAttribute("pageTitle", "Error!");
		return "errorPagina";
	}	
	/**
	 * Ultimas Ofertas: ofertas desde la fecha actual hasta el inicio del mes
	 * 
	 * La idea es traerte todas las reservas que se han hecho 
	 * desde el inicio de mes hasta el momento actual
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/ultimasOfertas", method = RequestMethod.GET)
	@Transactional
	public String ultimasOfertas(Locale locale, Model model,HttpSession session) {
		model.addAttribute("active", "ultimasOfertas");
		model.addAttribute("pageTitle", "Ultimas ofertas");	
	
		//Para delimitar las busquedas al mes actual
		DateFormat dateFormatActualDay = new SimpleDateFormat("yyyy/MM/dd");		
		DateFormat dateFormatActualHour = new SimpleDateFormat("hh:mm:ss");
		Date dateActual = new Date();
		Date hourActual = new Date();
		String inifecha = ""; //inicio mes
		String finfecha = ""; //fecha actual
		List<String> aux = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(dateFormatActualDay.format(dateActual),"/");
		while(tokens.hasMoreTokens()){			
			aux.add(tokens.nextToken());					 
		}			
		inifecha += aux.get(0) + "-" + aux.get(1) + "-01"; 
		finfecha += aux.get(0) + "-" + aux.get(1) + "-" + aux.get(2); // fecha actual		
			
		Timestamp beginLast = Timestamp.valueOf(inifecha + " " + "00:00:00.0");
		Timestamp endLast = Timestamp.valueOf(finfecha + " " +  dateFormatActualHour.format(hourActual) + ".0");
		
		List<Reserva> temp = new ArrayList<Reserva>();
		List<Oferta> lastOffers = new ArrayList<Oferta>();
		
		temp = entityManager.createNamedQuery("lastBooks")
				.setParameter("inicioBusq", beginLast)
				.setParameter("finBusq", endLast)
				.getResultList();
		
		for(int i =0; i < temp.size(); i++){
			lastOffers.add(entityManager.find(Oferta.class, temp.get(i).getOferta().getID()));
		}
		
		List<String> tagsToShow = new ArrayList<String>();
		for(int i =0; i < lastOffers.size(); i++){
			tagsToShow.add(lastOffers.get(i).tagsToShow());
		}
		model.addAttribute("platos", lastOffers);
		model.addAttribute("tagsString", tagsToShow);
		model.addAttribute("alltags", entityManager.createNamedQuery("allTags").getResultList());
		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		return "ultimasOfertas";
	}	
	/**
	 * Ofertas del mes: son aquellas que han superado o igualado la mitad de su capacidad	
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/ofertasMes", method = RequestMethod.GET)
	@Transactional
	public String ofertasMes(Locale locale, Model model, HttpSession session) {
		model.addAttribute("active", "ofertasMes");		
		model.addAttribute("pageTitle", "Ofertas del mes");	
		
		List<Oferta> auxOffers = entityManager.createNamedQuery("monthlySpecials").getResultList();
		List<String> tagsToShow = new ArrayList<String>();
		for(int i =0; i < auxOffers.size(); i++){
			tagsToShow.add(auxOffers.get(i).tagsToShow());
		}
		model.addAttribute("tagsString", tagsToShow);
		model.addAttribute("platos", auxOffers);
		model.addAttribute("alltags", entityManager.createNamedQuery("allTags").getResultList());

		Usuario usuarioOnline = (Usuario)session.getAttribute("user");
		if(usuarioOnline != null){
			Usuario usuario = entityManager.find(Usuario.class, usuarioOnline.getID());
			model.addAttribute("usuario", usuario);	
		}
		return "ofertasMes";
	}	

	
	
	/**
	 * Checks the anti-csrf token for a session against a value
	 * @param session
	 * @param token
	 * @return the token
	 */
	static boolean isTokenValid(HttpSession session, String token) {
	    Object t=session.getAttribute("csrf_token");
	    return (t != null) && t.equals(token);
	}
	
	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * @param session
	 * @return
	 */
	static String getTokenForSession (HttpSession session) {
	    String token=UUID.randomUUID().toString();
	    session.setAttribute("csrf_token", token);
	    return token;
	}
	
	public Usuario creaUsuario(String nombre, String email, String telefono, String rol, String contra){
		Usuario u = new Usuario();
		
		u.setNombre(nombre);
		u.setEmail(email);
		u.setTelefono(telefono);
		u.setRol(rol);
		u.setHashedAndSalted(Usuario.generateHashedAndSalted(contra));
		
		return u;
	}
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/registroUsuario", method = RequestMethod.POST)
	public ResponseEntity<String> registroUsuario(
			@RequestParam("name") String nombre,
			@RequestParam("pwd") String password,
			@RequestParam("email") String email,
			@RequestParam("tel") String telefono,
			@RequestParam("Rol") String rol, HttpSession session, Model model){
		boolean seguro = palabraSeguro(nombre) && palabraSeguro(password) && emailSeguro(email) && telefonoSeguro(telefono) && palabraSeguro(rol);
		if (seguro) {
		
			Usuario u;
			logger.info("registro usuario");
			boolean error = false;
				
			try{
				u = (Usuario) entityManager.createNamedQuery("dameUsuarioLogin").setParameter("nombre", nombre).getSingleResult();
			} catch (NoResultException nre){
			
				if(nombre.length() < 4 || nombre.length() > 12){
					error = true;
				}
		
				
				if(password.length() < 6 || password.length() > 12){
					error = true;
				}	
				
				String patron1 = new String("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
				
				if (!email.matches(patron1)) {
					error = true;
				}
					
				
				String patron2 = new String("^[0-9]{9}$");
				if(!telefono.matches(patron2)){
					error = true;
				}
					
		
				if(!error){
					if(rol.equals("propietario_comercio")){
						rol = "local";
					}	
					else{
						rol = "user";
					}
					
					u = creaUsuario(nombre, email, telefono, rol, password);
					logger.info(Long.toString(u.getID()));
					entityManager.persist(u);
					entityManager.persist(u);
					session.setAttribute("user", u);
		
					logger.info("El usuario no existe");
					
					return new ResponseEntity<String>("Usuario creado satisfactoriamente", HttpStatus.OK);	
				}
				else{
					return new ResponseEntity<String>("Usuario  no creado satisfactoriamente. Error en los datos", HttpStatus.BAD_REQUEST);
				}
			}
			
			logger.info("El usuario existia");
			return new ResponseEntity<String>("Apodo ocupado, usuario no creado", HttpStatus.BAD_REQUEST);
		}
		else {
			logger.info("Datos no validos");
			return new ResponseEntity<String>("Datos no validos, usuario no creado", HttpStatus.BAD_REQUEST);
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "/registroUsuarioFoto", method = RequestMethod.POST, headers = "content-type=multipart/*")
	public ResponseEntity<String> registroUsuarioFoto(
			@RequestParam("regfileToUpload") MultipartFile photo,
			MultipartHttpServletRequest req, HttpSession session){
		
	
		logger.info("registroUsuarioFoto");
		Usuario u = (Usuario)session.getAttribute("user");
		if (u == null) {
			return new ResponseEntity<String>("Ha habido algún problema al cargar el usuario de la base de datos", HttpStatus.NOT_MODIFIED);	
			
		}
				
		 if (!photo.isEmpty()) {
		    try {
		        byte[] bytes = photo.getBytes();
		        BufferedOutputStream stream =
		                new BufferedOutputStream(
		                		new FileOutputStream(ContextInitializer.getFile("usuarios", Long.toString(u.getID()) + ".jpg")));
		        stream.write(bytes);
		        stream.close();
				
		    } catch (Exception e) {
		    	return new ResponseEntity<String>("Fotografía no adjuntada al usuario satisfactoriamente", HttpStatus.NOT_MODIFIED);	
		    }
		 }
		
		return new ResponseEntity<String>("Fotografía adjuntada al usuario satisfactoriamente", HttpStatus.OK);	
	}
	
	@ResponseBody
	@RequestMapping(value = "/disponibilidadApodo", method = RequestMethod.POST)
	public ResponseEntity<String> comprobarDisponibilidadApodo(
			@RequestParam("apodo") String apodo,
			HttpSession session){
		
		String res = new String("ocupado");
		
		try{				
			String apodoBd = (String) entityManager.createNamedQuery("dameApodoUsuario").setParameter("apodo", apodo).getSingleResult();
			
		} catch (NoResultException nre) {
			res = "libre";
			return new ResponseEntity<String>(res, HttpStatus.OK);	
			
		}
		return new ResponseEntity<String>(res, HttpStatus.OK);	
	}
	
	/*@Transactional
	@RequestMapping(value = "/editarAdmin", method = RequestMethod.POST)
	public String editarAdmin(@RequestParam("fileToUpload") MultipartFile photo,
    		@RequestParam("adminName") String nombreUsuario,
    		@RequestParam("adminPwd") String pass,
    		@RequestParam("adminEmail") String email,
    		@RequestParam("adminTel") String telefono, 
    		HttpSession session,
    		Model model){
		Usuario edit = (Usuario)session.getAttribute("user");
		Usuario editAdmin = entityManager.find(Usuario.class, edit.getID());
		if(!editAdmin.getRol().equals("admin")){			
			return "errorPagina";
		}
		else{
			if(!pass.equalsIgnoreCase("*****")){ //si ha cambiado
				editAdmin.setHashedAndSalted(pass);
			}
			editAdmin.setNombre(nombreUsuario);
			editAdmin.setEmail(email);
			editAdmin.setTelefono(telefono);
			entityManager.persist(editAdmin);
			entityManager.flush();
	        if (!photo.isEmpty()) {
	            try {
	                byte[] bytes = photo.getBytes();
	                BufferedOutputStream stream = new BufferedOutputStream(
	                		new FileOutputStream(ContextInitializer.getFile(
	                				"usuarios", editAdmin.getID()+".jpg")));
	                stream.write(bytes);
	                stream.close();		
	            } catch (Exception e) {
	            	e.getMessage();
	            }
	        }	
		}
		return "redirect:administracion";	
	}*/
}