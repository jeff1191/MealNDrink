package es.fdi.iw.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NamedQuery;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.neo4j.cypher.internal.compiler.v2_1.planner.logical.steps.join;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import es.fdi.iw.ContextInitializer;
import es.fdi.iw.model.Comentario;
import es.fdi.iw.model.Local;
import es.fdi.iw.model.Oferta;
import es.fdi.iw.model.Usuario;
//import scala.annotation.meta.getter;

/**
 * Una aplicación de ejemplo para IW.
 */
@SuppressWarnings("unused")
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@PersistenceContext
	private EntityManager entityManager;
	
	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(
			@RequestParam("login") String formLogin,
			@RequestParam("pass") String formPass,
			//@RequestParam("source") String formSource,
			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {
		
		//logger.info("Login attempt from '{}' while visiting '{}'", formLogin, formSource);
		
		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("loginError", "usuarios y contraseñas: 4 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {
			Usuario u = null;
			/*try*/{
				/*u = (Usuario)entityManager.createNamedQuery("userByLogin")
					.setParameter("loginParam", formLogin).getSingleResult();*/
				
				u = (Usuario) entityManager.createNamedQuery("dameUsuarioLogin").setParameter("nombre", formLogin).getSingleResult();
				
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");				
					session.setAttribute("user", u);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				}
			/*} catch (NoResultException nre) {
				if (formPass.length() == 4) {
					// UGLY: register new users if they do not exist and pass is 4 chars long
					logger.info("no-such-user; creating user {}", formLogin);				
					Usuario user = new Usuario (formLogin, formPass, "user");
					entityManager.persist(user);				
					session.setAttribute("user", user);
					// sets the anti-csrf token
					getTokenForSession(session);				
				} else {
					logger.info("no such login: {}", formLogin);
				}*/
				//model.addAttribute("loginError", "error en usuario o contraseña");
			}
		}

		// redirects to view from which login was requested
		return "redirect:" + '/';
	}
				
	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "redirect:home";
	}

	/**
	 * Uploads a photo for a user
	 * @param id of user 
	 * @param photo to upload
	 * @return
	 */
	@RequestMapping(value="/user", method=RequestMethod.POST)
    public @ResponseBody String handleFileUpload(@RequestParam("photo") MultipartFile photo,
    		@RequestParam("id") String id){
        if (!photo.isEmpty()) {
            try {
                byte[] bytes = photo.getBytes();
                BufferedOutputStream stream =
                        new BufferedOutputStream(
                        		new FileOutputStream(ContextInitializer.getFile("user", id)));
                stream.write(bytes);
                stream.close();
                return "You successfully uploaded " + id + 
                		" into " + ContextInitializer.getFile("user", id).getAbsolutePath() + "!";
            } catch (Exception e) {
                return "You failed to upload " + id + " => " + e.getMessage();
            }
        } else {
            return "You failed to upload a photo for " + id + " because the file was empty.";
        }
    }

	/**
	 * Displays user details
	 */
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String user(HttpSession session, HttpServletRequest request) {		
		return "user";
	}	
	
	/**
	 * Returns a users' photo
	 * @param id id of user to get photo from
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/user/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] userPhoto(@RequestParam("id") String id) throws IOException {
	 //con esto accedo a ${base}/user/id
		/*   File f = ContextInitializer.getFile("user", id);
	    InputStream in = null;
	    if (f.exists()) {
	    	in = new BufferedInputStream(new FileInputStream(f));
	    } else {
	    	in = new BufferedInputStream(
	    			this.getClass().getClassLoader().getResourceAsStream("unknown-user.jpg"));
	    }
	    
	    return IOUtils.toByteArray(in);*/
		return null;
	}
	
	/**
	 * Toggles debug mode
	 */
	@RequestMapping(value = "/debug", method = RequestMethod.GET)
	public String debug(HttpSession session, HttpServletRequest request) {
		String formDebug = request.getParameter("debug");
		logger.info("Setting debug to {}", formDebug);
		session.setAttribute("debug", 
				"true".equals(formDebug) ? "true" : "false");
		return "redirect:/";
	}
	public static class Plato {
		private String id;
		private String[] tags;
		public Plato(String id, String ... tags) {
			this.id = id; this.tags = tags;
		}
		public String getId() { return id; }
		public String getTags() { return Arrays.toString(tags).replaceAll("[\\[\\], ]+", " ").trim(); }
	}
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String empty(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate);
		model.addAttribute("pageTitle", "Bienvenido a IW");
		model.addAttribute("active", "home");
		logger.info("Setting active tab: home");
		
		
		
				
		ArrayList<Plato> platos = new ArrayList<Plato>();
		platos.add(new Plato("1", "bootstrap", "html"));
		platos.add(new Plato("2", "bootstrap", "html", "wordpress"));
		platos.add(new Plato("3", "bootstrap"));
		platos.add(new Plato("4", "wordpress"));

		
		model.addAttribute("platos", platos);
		
		return "home";
	}	

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(Locale locale, Model model) {
		return empty(locale, model);
	}	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/acercaDe", method = RequestMethod.GET)
	public String acercaDe(Locale locale, Model model) {
		model.addAttribute("active", "acercaDe");

		return "acercaDe";
	}	
	@RequestMapping(value = "/usuario", method = RequestMethod.GET)
	public String usuario(Locale locale, Model model) {
		model.addAttribute("active", "usuario");

		return "usuario";
	}
	@RequestMapping(value = "/registrarse", method = RequestMethod.GET)
	public String registrarse(Locale locale, Model model) {
		model.addAttribute("active", "registrarse");

		return "registrarse";
	}
	@RequestMapping(value = "/comercio_externo", method = RequestMethod.GET)
	public String comercio_externo(Locale locale, Model model) {
		model.addAttribute("active", "comercio_externo");

		return "comercio_externo";
	}	
	@RequestMapping(value = "/comercio_interno", method = RequestMethod.GET)
	public String comercio_interno(Locale locale, Model model) {
		model.addAttribute("active", "comercio_interno");

		return "comercio_interno";
	}	
	@RequestMapping(value = "/administracion", method = RequestMethod.GET)
	@Transactional
	public String administracion(Locale locale, Model model) {
		model.addAttribute("active", "administracion");
		Usuario admin= new Usuario("Jeff la guarra", "laMasFea.jpg", "hola@oooo.com", "974587482", "admin", "admin");
		
		entityManager.persist(admin);
		
		System.out.println("PEPEPEPEPE");
		return "administracion";
	}	
	@RequestMapping(value = "/ultimasOfertas", method = RequestMethod.GET)
	@Transactional
	public String ultimasOfertas(Locale locale, Model model) {
		model.addAttribute("active", "ultimasOfertas");
		model.addAttribute("pageTitle", "Últimas ofertas");		
		
		ArrayList<String> tags1= new ArrayList<String>();
		tags1.add("bootstrap");
		tags1.add("html");
		tags1.add("wordpress");
		ArrayList<String> tags2= new ArrayList<String>();
		tags2.add("bootstrap");
		tags2.add("html");
		tags2.add("wordpress");
		ArrayList<String> tags3= new ArrayList<String>();
		tags3.add("html");
		tags3.add("bootstrap");
		/*
		Usuario admin= new Usuario("Jeff la guarra", "laMasFea.jpg", "hola@oooo.com", "974587482", "admin", "admin");
		Local comercio = new Local("Bistro", "/img/locals/dani_bistro.jpg", "324124114N 12313132S", "Calle 8 inventada", "l-x", admin, tags1);
		Local comercio2 = new Local("Chachi", "/img/locals/dani_bistro.jpg", "324124114N 12313132S", "Calle 9 inventada", "l-x", admin, tags2);
		Oferta offer = new Oferta("LaMasRica", "/img/offers/" + comercio.getNombre() + "_LaMasRica.jpg", new Timestamp(133333), 10,comercio,tags1);
		Oferta offer1 = new Oferta("LaMasRica2", "/img/offers/" + comercio.getNombre() + "_LaMasRica2.jpg", new Timestamp(133333), 10, comercio,tags2);
		Oferta offer2 = new Oferta("LaMasRica3", "/img/offers/" + comercio.getNombre() + "_LaMasRica3.jpg", new Timestamp(133333), 10, comercio,tags3);
		*/
	//	Oferta offer3 = new Oferta("Sabroso", "/img/offers/" + comercio2.getNombre() + "_LaMasRica4.jpg", new Timestamp(133333), 11, comercio2,"html");
	//	Oferta offer4 = new Oferta("Sabroso2", "/img/offers/" + comercio2.getNombre() + "_LaMasRica5.jpg", new Timestamp(133333), 11, comercio2,"bootstrap");
		/*
		entityManager.persist(admin);
		entityManager.persist(comercio);
		entityManager.persist(comercio2);
		entityManager.persist(offer);
		entityManager.persist(offer1);
		entityManager.persist(offer2);
	//	entityManager.persist(offer3);*/
		//entityManager.persist(offer4);		
		String[] alltags = {"bootstrap", "html", "wordpress"};
				
		//System.out.println(platos.get(0).getNombre());
		ArrayList<String> a = new ArrayList<String>();// = entityManager.createNamedQuery("allOffers").getResultList();
		System.err.println(a.size());
		model.addAttribute("platos", a);
		model.addAttribute("alltags", alltags);
		//model.addAttribute("platos", platos);

		return "ultimasOfertas";
	}	
	@RequestMapping(value = "/ofertasMes", method = RequestMethod.GET)
	@Transactional
	public String ofertasMes(Locale locale, Model model) {
		model.addAttribute("active", "ofertasMes");

		return "ofertasMes";
	}	

	/**
	 * A not-very-dynamic view that shows an "about us".
	 */
	@RequestMapping(value = "/about", method = RequestMethod.GET)
	@Transactional
	public String about(Locale locale, Model model) {
		/*logger.info("User is looking up 'about us'");
		@SuppressWarnings("unchecked")
		List<User> us = (List<User>)entityManager.createQuery("select u from User u").getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		model.addAttribute("pageTitle", "IW: Quienes somos");*/
		return "about";
	}	
	
	/**
	 * Checks the anti-csrf token for a session against a value
	 * @param session
	 * @param token
	 * @return the token
	 */
	static boolean isTokenValid(HttpSession session, String token) {
	    Object t=session.getAttribute("csrf_token");
	    return (t != null) && t.equals(token);
	}
	
	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * @param session
	 * @return
	 */
	static String getTokenForSession (HttpSession session) {
	    String token=UUID.randomUUID().toString();
	    session.setAttribute("csrf_token", token);
	    return token;
	}
	
	/** 
	 * Returns true if the user is logged in and is an admin
	 */
	static boolean isAdmin(HttpSession session) {
		/*User u = (User)session.getAttribute("user");
		if (u != null) {
			return u.getRole().equals("admin");
		} else {
			return false;
		}*/
		return false;
	}
	
	public Usuario creaUsuario(String nombre, String email, String telefono, String rol, String contra){
		Usuario u = new Usuario();
		
		u.setNombre(nombre);
		u.setEmail(email);
		u.setTelefono(telefono);
		u.setRol(rol);
		u.setHashedAndSalted(Usuario.generateHashedAndSalted(contra));
		
		return u;
	}
	
	@Transactional
	@RequestMapping(value = "/creausuariopruebas", method = RequestMethod.GET)
	public String crearUsuarioPruebas(){
		Usuario u = creaUsuario("prueba", "email", "telefono", "rol", "1234");
		u.setFoto("ppppp");
		
		entityManager.persist(u);
		
		return "redirect:home";
	}
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/registroUsuario", method = RequestMethod.POST, headers = "content-type=multipart/*")
	public ResponseEntity<String> registroUsuario(
			@RequestParam("name") String nombre,
			@RequestParam("pwd") String password,
			@RequestParam("email") String email,
			@RequestParam("tel") String telefono,
			@RequestParam("fileToUpload") MultipartFile photo,
			@RequestParam("Rol") String rol,
			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session,
			MultipartHttpServletRequest req){
		
		Usuario u;
			
		try{
			u = (Usuario) entityManager.createNamedQuery("dameUsuarioLogin").setParameter("nombre", nombre).getSingleResult();
		} catch (NoResultException nre){
				
			u = creaUsuario(nombre, email, telefono, rol, password);
			String q = handleFileUpload(photo, String.valueOf(rol + "_" + nombre));
			entityManager.persist(u);

			
			return new ResponseEntity<String>("Usuario creado satisfactoriamente", HttpStatus.OK);	
		}
		
		return new ResponseEntity<String>("Apodo ocupado, usuario no creado", HttpStatus.NOT_ACCEPTABLE);
	}
}